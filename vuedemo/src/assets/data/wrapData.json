[
	{
		"id": 1,
		"name": "1.Boolean",
		"content": "Boolean表达式中的对象都会被转换为true，即 new Boolean(false)返回的是true，使用typeof 检测返回'object'",
		"function": 0,
		"say": "建议你们最好不要直接使用我的实例化类型哟，因为你可能会和基本类型的Boolean混淆，而且我的实用价值么有多大~",
		"children": 0
	},
	{
		"id": 2,
		"name": "2.Number",
		"content": "使用new Number()来创建Number对象，Number是与数字值对应的引用类型，和Boolean类型一样，Number类型也重写了valueOf()、String()、toString()方法。重写后的valueOf()方法返回对象表示的基本类型的数值，另外两个方法返回字符串形式的数值。使用typeof 检测返回'object'。",
		"function": "toFixed()、toExponential()、toPrecision()",
		"say": "建议你们最好不要直接使用我的实例化类型我哟~",
		"children": [
			{
				"id": "21",
				"name": "toFixed()",
				"say": "我可以用来格式化字符串，我的参数数值代表有多少个小数位~例如：11.toFixed(2)得到'11.00'"
			},
			{
				"id": "22",
				"name": "toExponential()",
				"say": "我是用来格式化数值的方法，我返回的是指数表示法~例如：10.toExponential(1)得到'1.0e+1'"
			},
			{
				"id": "23",
				"name": "toPrecision()",
				"say": "我返回的是某个数值最合适的格式哟~可能是固定格式，也可能是指数格式，看的是哪一个最适合我~"
			}
		],
		"es6": ""
	},
	{
		"id": 3,
		"name": "3.String",
		"content": "String类型是字符串的对象包装类型，使用new String()来创建String包装对象",
		"function": "chartAt()、chartCodeAt()、concat()、slice()、substr()、subString()、indexOf()、lastIndexOf()、trim()、toLowerCase()、toLocaleLowerCase()、toUpperCase、toLocaleUpperCase()、match()、search()、replace()、split()、localCompare()、fromCharCode()。",
		"say": "我的所有的方法都可以在所有的基本的字符串中访问到，我的方法都是基本字符串类型服务的哟~",
		"children": [
			{
				"id": "31",
				"name": "两个字符方法chartAt()、chartCodeAt()",
				"say": "我们都接收一个参数，即基于0的字符位置。我chartAt()是以单字符串的形式返回给定位置的那个字符，例如：'adesd'.charAt(2)得到'e'；我chartCodeAt()给你的是字符编码不是字符哟~~例如：'adesd'.charAt(2)得到101，101是e的字符编码"
			},
			{
				"id": "32",
				"name": "concat()拼接字符串",
				"say": "我可以把一个或者多个字符串拼接起来，返回拼接得到的新字符串哟~哈哈不过在实践中会使用 '+' 来完成字符串的拼接 ^_^"
			},
			{
				"id": "33",
				"name": "slice()、substr()、subString()都是基于子字符串创建新字符串的方法。",
				"say": "我们兄弟三个都不会修改原始字符串的值；我们返回的是被操作字符串的子字符串，都可以接受一个或两个参数，第一个参数是开始的位置，其中slice()和subString的第二个参数表示结束的位置，如果没有指定，默认到原始字符串的结尾，substr()的第二个参数表示的是要截取的字符串的长度。"
			},
			{
				"id": "34",
				"name": "indexOf()和lastIndexOf()",
				"say": "我们兄弟二人都是从一个字符串中搜索给定的子字符串哟，如果没有找到相应的子字符串，都会给你返回一个-1，我indexOf()是从投开始搜索，当然啦，lastIndexOf()是从最后开始向前搜索啦~；我们也都可以接收第二个参数，第二个参数表示从哪开始搜索哟~"
			},
			{
				"id": "35",
				"name": "trim()方法",
				"say": "我会创建一个字符串的副本，删除前置及后缀的所有空格，然后返回字符串的副本~~，所以原始字符串的前置及后缀的空格会保持不变哟~~"
			},
			{
				"id": "36",
				"name": "toLowerCase()、toLocaleLowerCase()、toUpperCase()、toLocaleUpperCase()",
				"say": "我们4个是字符串大小写转换用到的方法，其中toLowerCase()和toUpperCase()是经典的方法，借鉴的是java.lang.String；toLocaleLowerCase和toLocaleUpper()是针对特定地区实现的；不过当你不知道代码在哪种语言环境中运行的情况下，还是使用针对地区的稳妥些哟~~"
			},
			{
				"id": "37",
				"name": "match()、search()、replace()、split()字符串的模式匹配方法",
				"say": "我们都和正则表达式有关哟~match()和search()接受的参数要么是一个正则表达式，要么是一个RegExp对象；search()方法返回字符串中第一个匹配项的索引，如果没有找到匹配项，则返回-1，我始终是从字符串的开头向后查找的模式。replace()方法的第一个参数可以是一个RegExp对象或者是一个字符串，第二个参数可以是一个字符串或者一个函数，如果第一个参数是一个字符串，那么只会替换第一个子字符串，如果想替换所有子字符串，唯一的办法就是提供一个正则表达式，而且要全局标志。spilit()方法基于指定的分隔符将一个字符串分隔成多个子字符串，并将结果放在数组中，分隔符可以是字符串，也可以是正则表达式，我可以接受可选的第二个参数，用于指定数组的大小，以确保返回的数组不会超过既定的大小。"
			},
			{
				"id": "38",
				"name": "localeCompare()",
				"say": "饿哦的作用是比较两个字符串的大小，如果和我比较的字符串的首字母的排序在我在字母表的排序之前就返回1，如果在我之后就返回-1，如果相等就为0。"
			},
			{
				"id": "39",
				"name": "fromChartCode()",
				"say": "我是String构造函数本身的一个静态方法，我可以接收一个或者多个字符编码，然后将它转换成一个字符串，本质上这个方法与实例方法charCodeAt()方法的相反操作哟~~"
			}
		],
		"es6": "为了网民日益增长的互联网需要，我又新增了一些方法。codePointAt()、String.fromCodePoint()、at()以上的方法都是为了满足4字节的需要提供（码点大于0xFFFF的字符）。includes()、startsWith()、endsWith()，弥补只有indexOf()一个方法确定一个字符串是否包含在另一个字符串中，我们三个都会发Boolean值。repeat()返回一个新字符串，表示将原字符串重复的次数。es8还提供了两个字符串补全长度的功能padStart()和padEnd()，如果某个字符串不够指定长度，在头部或者尾部补全。"
	}
]